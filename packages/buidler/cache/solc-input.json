{
  "language": "Solidity",
  "sources": {
    "contracts/MetaMultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// started from https://solidity-by-example.org/0.6/app/multi-sig-wallet/ and cleaned out a bunch of stuff\n// grabbed recover stuff from bouncer-proxy: https://github.com/austintgriffith/bouncer-proxy/blob/master/BouncerProxy/BouncerProxy.sol\n// after building this I found https://github.com/christianlundkvist/simple-multisig/blob/master/contracts/SimpleMultiSig.sol which is amazing and he even has the duplicate guard the same (Scott B schooled me on that!)\npragma solidity ^0.6.10;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/cryptography/ECDSA.sol\";\n\ncontract MetaMultiSigWallet {\n    using ECDSA for bytes32;\n\n    event Deposit(address indexed sender, uint amount, uint balance);\n    event ExecuteTransaction( address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\n    event Owner( address indexed owner, bool added);\n\n    mapping(address => bool) public isOwner;\n    uint public signaturesRequired;\n    uint public nonce;\n    uint public chainId;\n\n    constructor(uint256 _chainId, address[] memory _owners, uint _signaturesRequired) public {\n        require(_signaturesRequired>0,\"constructor: must be non-zero sigs required\");\n        signaturesRequired = _signaturesRequired;\n        for (uint i = 0; i < _owners.length; i++) {\n            address owner = _owners[i];\n            require(owner!=address(0), \"constructor: zero address\");\n            require(!isOwner[owner], \"constructor: owner not unique\");\n            isOwner[owner] = true;\n            emit Owner(owner,isOwner[owner]);\n        }\n        chainId=_chainId;\n    }\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"Not Self\");\n        _;\n    }\n\n    function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf {\n        require(newSigner!=address(0), \"addSigner: zero address\");\n        require(!isOwner[newSigner], \"addSigner: owner not unique\");\n        require(newSignaturesRequired>0,\"addSigner: must be non-zero sigs required\");\n        isOwner[newSigner] = true;\n        signaturesRequired = newSignaturesRequired;\n        emit Owner(newSigner,isOwner[newSigner]);\n    }\n\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf {\n        require(isOwner[oldSigner], \"removeSigner: not owner\");\n        require(newSignaturesRequired>0,\"removeSigner: must be non-zero sigs required\");\n        isOwner[oldSigner] = false;\n        signaturesRequired = newSignaturesRequired;\n        emit Owner(oldSigner,isOwner[oldSigner]);\n    }\n\n    function updateSignaturesRequired(uint256 newSignaturesRequired) public onlySelf {\n        require(newSignaturesRequired>0,\"updateSignaturesRequired: must be non-zero sigs required\");\n        signaturesRequired = newSignaturesRequired;\n    }\n\n    function getTransactionHash( uint256 _nonce, address to, uint256 value, bytes memory data ) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this),chainId,_nonce,to,value,data));\n    }\n\n    function executeTransaction( address payable to, uint256 value, bytes memory data, bytes[] memory signatures)\n        public\n        returns (bytes memory)\n    {\n        require(isOwner[msg.sender], \"executeTransaction: only owners can execute\");\n        bytes32 _hash =  getTransactionHash(nonce, to, value, data);\n        nonce++;\n        uint256 validSignatures;\n        address duplicateGuard;\n        for (uint i = 0; i < signatures.length; i++) {\n            address recovered = recover(_hash,signatures[i]);\n            require(recovered>duplicateGuard, \"executeTransaction: duplicate or unordered signatures\");\n            duplicateGuard = recovered;\n            if(isOwner[recovered]){\n              validSignatures++;\n            }\n        }\n\n        require(validSignatures>=signaturesRequired, \"executeTransaction: not enough valid signatures\");\n\n        (bool success, bytes memory result) = to.call{value: value}(data);\n        require(success, \"executeTransaction: tx failed\");\n\n        emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\n        return result;\n    }\n\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n    receive() payable external {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}